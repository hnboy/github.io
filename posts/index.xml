<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - stay foolish stay hungry</title><link>https://hnboy.github.io/posts/</link><description>All Posts | stay foolish stay hungry</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>hnwolf@gmail.com (WQ)</managingEditor><webMaster>hnwolf@gmail.com (WQ)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 22 Apr 2022 15:24:58 +0800</lastBuildDate><atom:link href="https://hnboy.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>Libvirt</title><link>https://hnboy.github.io/libvirt/</link><pubDate>Fri, 22 Apr 2022 15:24:58 +0800</pubDate><author>Author</author><guid>https://hnboy.github.io/libvirt/</guid><description><![CDATA[<p>Libvirt可以通过qemu和OVMF来支持UEFI虚拟机，先安装edk2-ovmf,然后添加如下内容
/etc/libvirt/qemu.conf</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="c1">// /etc/libvirt/qemu.conf
</span><span class="c1"></span><span class="n">nvram</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">&#34;/usr/share/ovmf/x64/OVMF_CODE.fd:/usr/share/ovmf/x64/OVMF_VARS.fd&#34;</span>
    <span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>炉石传说</title><link>https://hnboy.github.io/%E7%82%89%E7%9F%B3%E4%BC%A0%E8%AF%B4/</link><pubDate>Sat, 19 Mar 2022 11:08:25 +0800</pubDate><author>Author</author><guid>https://hnboy.github.io/%E7%82%89%E7%9F%B3%E4%BC%A0%E8%AF%B4/</guid><description></description></item><item><title>Civid 6</title><link>https://hnboy.github.io/steam/</link><pubDate>Sun, 18 Jul 2021 00:21:05 +0800</pubDate><author>Author</author><guid>https://hnboy.github.io/steam/</guid><description></description></item><item><title>sshd配置</title><link>https://hnboy.github.io/sshd/</link><pubDate>Fri, 21 May 2021 19:49:08 +0800</pubDate><author>Author</author><guid>https://hnboy.github.io/sshd/</guid><description>ssh-key访问服务器</description></item><item><title>Git</title><link>https://hnboy.github.io/git/</link><pubDate>Wed, 19 May 2021 13:58:24 +0800</pubDate><author>Author</author><guid>https://hnboy.github.io/git/</guid><description></description></item><item><title>Gitlab</title><link>https://hnboy.github.io/gitlab/</link><pubDate>Thu, 13 May 2021 15:31:13 +0800</pubDate><author>Author</author><guid>https://hnboy.github.io/gitlab/</guid><description>Gitlab安装</description></item><item><title>CE Reduction</title><link>https://hnboy.github.io/onfi-ce-reduction/</link><pubDate>Mon, 10 May 2021 22:08:48 +0800</pubDate><author>Author</author><guid>https://hnboy.github.io/onfi-ce-reduction/</guid><description>简介 在大容量NAND Package设计中，一个设计中可能存在很多个NAND Package，每个package中一般有2~8根CE# PIN。使用CE# Reduction机制可以让host的单个CE#被多个NAND pacakge复用,这样使得Host所需要的CE#引脚大大减少。
CE Reduction机制在初始化过程中，为每一个NAND指定一个Volume地址。初始化后，host可以通过volume选择命令(E1h)在选择指定的Volume。
Tips:这里要区分NAND中Package,Target,LUN的概念划分。可以参考下图
package.pngNAND Package
" package.png
在物理连接上,通过ENo和ENI依次串联起所有的NAND Package。第一个Package的ENI不会连接，后面的Package依次连接到前一个Package的ENo信号。
在Power on的时候，ENo会被driver low。之后如果CE#被置成High状态，ENo对应为High-Z状态。如果CE#置成Low并set成对应的volume地址后，此时的ENo会被置高。
ENi状态决定了NAND package是否接受cmd。 如果CE# LOW and ENi Pin is High,那么就可以接受cmd；反之如果CE# high或者ENi low，则不能接受cmd。
initial sequence host power on the NAND.
host pulls CE# LOW.
如果resetting all NAND Parallel，host 发送Reset(FFh) command.此时Reset CMD会被所有的NAND Device接受到。</description></item><item><title>开关电源归类</title><link>https://hnboy.github.io/%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90/</link><pubDate>Mon, 10 May 2021 22:08:48 +0800</pubDate><author>Author</author><guid>https://hnboy.github.io/%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90/</guid><description>基本分类介绍 硬开关 当晶体管上的电压（或电流）尚未到零时，强迫开关管开端或管段，这时开关管的电压下降或上升和电流的上升和下降有一个交叠的过程，使得开关过程中管子上有损耗，这种开关方式成为硬开关 硬软开关 与硬开关相对，当晶体管开关在电压为零的时候开通，或电流为零的时候管段，从而使得开关损耗接近于零，这种开关的方式成为软开关 谐振 在理想的LC并联电路上加正弦电流源时，电路的总导纳为零，元件上的电压为无穷大，这种现象为并联谐振，电路谐振时有一下两个重要参数 （1）谐振频率：谐振时的电路频率 ω = 1/√LC （2）特征频率：谐振时，感抗等于容抗，其值为Z=√(L/C)，称为特征阻抗。当LC串联电路上突加直流电压时，电路中的电流按照正弦规律无阻尼振荡，其频率即为电路的谐振频率也称为振荡频率 准谐振 对于有开关的LC串联电路，点电流按照谐振振荡时，如果开关动作，使得电流正弦振荡只在一个周期的部分时间内发生，则电路会呈准正弦，这一现象称为准谐振。同样在LC并联电路中，借助开关动作，也可获得准谐振。 零电压开通 利用谐振现象。当开关变换器中的器件电压按照正弦规律振荡到零时，使得器件开通，称为ZVS 即零电压开通 零电流关断 同理，当开关变换器中的器件电流按正弦规律振荡到零时，使器件关断称之为 ZCS 保持时间 保持时间是指交流输入电源发生故障后，电源能保持输出电压不变的时间 拓扑结构 拓扑结构指变换器的电路结构类型。常用变换器的电路结构有反激式、正激式、半桥式、全桥式、谐振式和软开关式等。 电路拓扑结构设计选择常见问题 占空比
输出电压和输入电压是否相差5倍以上，如果是可能就需要用变压器，计算合适的占空比，提高效率。 电源需要空载工作吗？
如果是，建议变换器工作与电流断续模式，除非采用同步整流。 如果能够使用同步整流，不管负载大小如果，都可以使得变换器工作于电流连续模式。 输出电流大吗？
如果有大输出电流，选用电压模式控制要比电流模式控制要好。</description></item><item><title>比较器和误差放大器</title><link>https://hnboy.github.io/%E6%AF%94%E8%BE%83%E5%99%A8%E5%92%8C%E8%AF%AF%E5%B7%AE%E5%99%A8/</link><pubDate>Mon, 10 May 2021 22:08:48 +0800</pubDate><author>Author</author><guid>https://hnboy.github.io/%E6%AF%94%E8%BE%83%E5%99%A8%E5%92%8C%E8%AF%AF%E5%B7%AE%E5%99%A8/</guid><description>比较器和误差放大器区别 输出结果的不一样 &amp;mdash; 离散和连续的区别 比较器与放大器 运算放大器在不加负反馈的时候，从原理上来看可以用作比较器，但是由于放大器的开环增益非常高，它只能处理输入差分电压非常小的信号。而且在这种情况下，运算放大器的响应时间比比较器会慢很多，而且缺少一些特殊的功能，比如：滞回、内部基准。 比较器通常不能作为运算放大器，比较器经过调解可以提供极小的时间延迟，但是其频率响应特性会受到一定的限制，运算放大器正式利用了频响修整这个优势成为了灵活多用的器件。另外，许多比较器还有内部滞回电路，可以避免了输出震荡，但同时也让比较器不能当做当做运算放大器使用。 电源电压 传统的比较器需要$\pm15V$的双电源或者高达36V的电源源供电。（一些运算放大器也需要双电源工作，满足输出条件，这一点个人认为并不能作为两者之间的区别） - 比较器两个输入端之间的电压在过零时候输出状态将发生改变，由于输入端通常有很小的波动电压，这些波动所产生的差模电压会导致比较器输出发生连续的变化。为了避免输出震荡，新型的比较器通常具有几mV的滞回电压。滞回电压的存在使比较器在切换点变为两个，一个用于检测上升电压，一一个用于检测下降电压。高电压门限$V_{TRIP+}$与低电压门限$V_{TRIP-}$之差等于滞回电压($V_{HYST}$),滞回比较器的失调电压$V_{OS}$是高电压门限和低电压门限的平均值。 1.png滞回比较器
" 1.png 不带滞回的比较器的输入电压切换点是输入失调电压，而不是理想比较器的零电压。失调电压(即切换电压)一般随温度、电源电压的变化而变化。通常用电源抑制比(PSRR)衡量这一影响，它表示标称电压的变化对失调电压的影响。理想的比较器的输入阻抗为无穷大，因此，理论上对输入信号不产生影响，而实际比较器的输入阻抗不可能做到无穷大，输入端有电流经过信号源内阻并流入比较器内部，从而产生额外的压差。偏置电流(IBIAS)定义为两个比较器输入电流的中值，用于衡量输入阻抗的影响。 比较器的输出 不同的输出状态。零电平或电源电压，具有满电源摆幅特性的比较器输出级为射极跟随器，这使得其输出信号与电源摆幅之间仅有极小的压差。该压差取决于比较器内部晶体管饱和状态下的集电极与发射极之间的电压。CMOS满摆幅比较器的输出电压取决于饱和状态下的MOSFET，与双极型晶体管结构相比，在轻载情况下电压更接近于电源电压。比较器属于 开环电路，比较输出端的$$u_1$$和$$u_2$$电压大小，当正输入端电压较大的时候，输出高电平(比较器属于OC输出，需要加上拉电阻，上拉几伏就输出几伏)；当负极电压较大的时候，输出低电平(GND).
输出延迟时间是选择比较器的关键参数。延迟时间包括信号通过元器件产生的传输延时和信号的上升时间与下降时间，对于高速比较器，如MAX961、MAX9010-MAX9013，其延迟时间的典型值分别达到4.5ns和5ns，上升时间为2.3ns和3ns (注意：传输延时的测量包含了上升时间)。设计时需注意不同因素对延迟时间的影响(图2)，其中包括温度、容性负载、输入过驱动等因素。对于反相输入，传输延时用tPD-表示；对于同相输入，传输延时用tPD+表示。TPD+与tPD-之差称为偏差。电源电压对传输延时也有较大影响。
实际比较器应用 第1个例子是电平转换器，可完成3V逻辑至5V逻辑的变换。 2.png比较器
" 2.png
如图4所示，漏极开路输出比较器，如MAX986，提供了一个极为简捷的实现方案，同样，如果比较器供电电压允许(如MAX972)，也可实现±5V双极性逻辑至3V单极性逻辑的电平转换。具体应用时应注意输入信号不要超出电源电压的摆幅，流入输出端的电流由大阻值的上拉电阻限制(参考MAX986数据资料的Absolute Maximum Ratings)。 该电路可将双极性输入（这里为正弦波)转换为单极性的方波输出，外加的偏置电压为
3.png阻值
" 3.png $$V_{OS}=\frac{V_{CC}R_1R_2+V_2R_1R_3}{R_1R_2+R_1R_3+R_2R_3}$$
两个阻值相同的电阻(R4)将比较器切换检测门限设置在电源电压的一半。
图6所示是利用四个比较器构成一个电流检测电路，可用于指示输入电流的四个范围，旁路电阻用于将输入电流转换为电压信号，R1-R2用于设置运算放大器的增益，并为比较器提供所需要的基准电压。R4-R7用来设置不同数字输出状态所对应的检测门限。
4.png电流量测解决方案
" 4.png</description></item><item><title>运算放大器用作比较器</title><link>https://hnboy.github.io/%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8%E7%94%A8%E4%BD%9C%E6%AF%94%E8%BE%83%E5%99%A8/</link><pubDate>Mon, 10 May 2021 22:08:48 +0800</pubDate><author>Author</author><guid>https://hnboy.github.io/%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8%E7%94%A8%E4%BD%9C%E6%AF%94%E8%BE%83%E5%99%A8/</guid><description>为什么要将运算放大器用作比较器？ 方便 经济 低$I_B$ 低$V_{OS}$ 比较器专门针对干净快速的切换而设计的，所有许多直流参数不如运算放大器。当电路 对直流参数有较高要求的时候可以考虑使用运算放大器。反之如果电路中速度很重要就不能使用。 为什么大多数情况不把运算放大器用作比较器 速度 输入结构不方便 逻辑结构不方便 稳定性/迟滞 许多比较器的速度都非常快,为什么将运算放大器用作比较器时造成低速度? 比较器设计用于大差分输入电压，而运算放大器一般用于驱动闭环系统，在负反馈的作用下，其输入电压差降至非常低.当运算放大器过载时候，有时候几毫伏也可能导致过载，其中有些放大级可能发生饱和。这种情况下，器件要相对较长的时候从饱和中恢复，如果发生饱和，其速度将慢很多。 现代运算放大器多采用轨到轨输出，其最大正电平接近正电源，最低负电平接近负电源。(老式设计所用架构的两个供电轨都具有1.5 V以上的动态余量。)
如果逻辑和运算放大器共用同一电源，轨到轨运算放大器可成功驱动CMOS和TTL逻辑系列，但是，如果运算放大器和逻辑采用不同电源，则需在两者之间另外设置接口电路。注意，这种情况采用于采用±5 V电源的运算放大器，必须用+5 V电源驱动逻辑；如果施加-5 V电源，则可能损坏逻辑。
最简单的接口电路就是变换器，可能以NPN晶体管制成，但这些元件需会基极吸取电流。更为方便的是N-沟道MOSFET晶体管。如下图所示
1.png接口电路
" 1.png
RB设定晶体管基极电流，RL则设定集电极/漏极的电流。该电流越小，变换器速度就越快，但其功耗也越大。通常使用几千欧姆的数值。N-沟道MOS器件应采用低栅极阈值电压(&amp;lt;2 V)和高于运算放大器最大输出电压的栅源击穿电压。一般±25 V就够了。尽管运算放大器和逻辑使用不同的电源，但必须相互连接。运算放大器正电源+VA必须比逻辑负电源-VL高至少3 V，才能提供足够电压来开启晶体管或MOSFET栅极。另外，运算放大器负电源相对于逻辑负电源不能为正，但可与其相连。当然，必须遵循全部所用器件的绝对最大额定值。 补充MOS变换器可采用一个P-沟道和一个N-沟道MOSFET。这样做的优势在于没有待机电流，但在切换过程中，两个器件同时开启时会产生大电流尖峰。在这种设计中，运算放大器正电源+VA必须等于或大于逻辑正电源+VL。另外，运算放大器负电源必须等于或小于逻辑负电源。如下图所示
2.png补充mos变换电路
" 2.png
注意事项 相位反转 老式FET输入放大器，会有相位翻转的现象。如果输入超过允许的共模范围，反相和同相输入将互换角色。 不稳定性 将运放用作比较器的时候没有负反馈，开环增益非常高。在跃迁期间即使是很小的正反馈也可能激发震荡。反馈可能来自输出与同相输入之间的电容，也可能来自共地阻抗中存在的输出电流。</description></item></channel></rss>